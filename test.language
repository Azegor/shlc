
// >>>>>>> stdlib declarations:

fn prt(int i) native "prt_i";
fn prt_w(int i, w) native "prt_w_i";
fn prtln(int i) native "prtln_i";

fn prt(flt f) native "prt_f";
fn prt_w(flt f, w) native "prt_w_f";
fn prtln(flt f) native "prtln_f";

fn prt(chr c) native "prt_c";
fn prtln(chr c) native "prtln_c";

fn prt(boo b) native "prt_b";
fn prtln(boo b) native "prtln_b";

fn prt(str s) native "prt_s";
fn prtln(str s) native "prtln_s";

// <<<<<<<


fn hi()
{
  prt('H');
  prt('i');
  prt('\n');
}

fn loop()
{
  ret;
  whl T {
    prt('.');
  }
}

fn testasdfasdf(int i) : flt
{
  i = 3+4+3+4+2+5+234*3+4*(5+6);
  ret i;
}

fn yo(){}

fn test(int a) {
  yo();
}

fn exit(int i) native;

fn bla(int a, b) {
  exit(1);
}

fn bla2(int a, b; flt c, d) {
  test(2);
}

fn whatever_fn_name(int a; flt b, c, d; chr e,f,g,h,i;boo l;) {
  yo();
}

fn declaration();
fn decl2(int a, b; flt c,d;);
fn decl3();

fn nativeFunction() native;
fn ANF(int a,b,c,d,e,f;boo g,h,i,j,k,l;) native;

// existing native functions:
fn sin(flt val) native;
fn cos(flt val) native;
fn tan(flt val) native;

//fn putc(chr c) native;

fn complex(int i) : flt
{
  ret 2*(3+4)*(5*6+7*8);
  whl T {
    ret 42;
  }
  var i : int;
  do {
    i = 7;
  } whl F;
  var j : int;
  for j = 0; j < 7; j+=1
  {
    i += 2;
  }
  ret 'x';
}

fn double() : flt {ret 1.2345;}
fn integer() : int {ret 123;}
fn boolean() : boo {ret T;}
fn char() : chr {ret 'c';}
//fn string() : str {ret "hi";}

fn duplicate();
fn duplicate();
fn duplicate();
fn duplicate();
fn duplicate() {}
fn duplicate();
fn duplicate();
fn duplicate();

fn double(flt f) : flt { ret f; }

fn double_f_f(){}

fn returnParam(int i) : int {ret i; }

fn whlVarTest(boo b; int i; flt f)
{
  whl b {
    ret;
  }
  whl i {
    ret;
  }
  whl f {
    ret;
  }
  4 : flt;
}

fn int_flt_cast(int i) : flt { ret i : flt; }
fn flt_int_cast(flt f) : int { ret f : int; }
fn int_chr_cast(int i) : chr { ret i : chr; }
fn chr_flt_cast(chr c) : flt { ret c : flt; }
fn chr_int_cast(chr c) : int { ret c : int; }
fn boo_int_cast(boo b) : int { ret b : int; }
fn boo_flt_cast(boo b) : flt { ret b : flt; }
fn chr_boo_cast(chr c) : boo { ret c : boo; }
fn flt_boo_cast(flt f) : boo { ret f : boo; }
// TODO: missing implicit cast for return statement??? let RetExpr check this!

fn assign_test(int i, j, k) : int
{
  i = k;
  i += j;
  // i += j += k; // broken, because wrong associativity for now! (FIXME)
  k = i + j * k;
  ret k;
}

fn local_vars(boo bl) : flt {
  var a = 42;
  var b = 'c';
  var c = 4.5;
  ret (bl*a+1) * (bl*b) + (bl*c);
}

fn break_test(boo b)
{
  whl b {
    brk;
    cnt;
    ret;
  }
  ret;
}

fn if_test(boo b)
{
  do {
    if b {
      cnt;
    } elif !b {
//     } elif b ^ b {
      brk;
    } el {
      ret;
    }
  } whl b;
}

fn test_bitcomp(int i; chr c; boo b) : int
{
  ret ~i | ~c&(b:chr) ^ (~b|i);
}

fn stringtest() : str
{
  var s = "yo";
  ret s;
  ret "somestringconst";
}

fn print_string()
{
  prt("hi there\n");
  var i : int;
  for i = 0; i < 100; i += 1 {
    prt("<<");
    prt(i*i);
    prt(">>");
  }
  prt('\n');
}

fn print_mult_table()
{
  var i, j : int;
  for i = 1; i <= 10; ++i {
    for j = 1; j <= 10; ++j {
      prt_w(i*j, 3);
      prt(' ');
    }
    prt('\n');
  }
//   prt_i("string");
}

fn main() {
  hi();
  4;
  3+4+3+4+2+5+234;
  1+2*3+4;
  //testabc(3+4);
  loop();
  print_string();
  print_mult_table();
  exit(0);
}

fn overload(int i){}
fn overload(flt f){}

fn call_overload()
{
  overload(1);
  overload(3.1415926535897932385636);
}

fn flt_call(flt f) {}

fn call_imp_cast()
{
  flt_call(0);
}